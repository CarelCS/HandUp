//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17929.
// 
#pragma warning disable 1591

namespace HandUpGUI.localhost {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IHandUpService", Namespace="http://tempuri.org/")]
    public partial class HandUpService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AllAdvertsAvailableForProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeclineOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTextToOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback OrdersPerTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback JoinTableCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPatronToTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallWaiterOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActiveTablesForWaiterOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActiveTablesForProcessorOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActiveTablesForProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllTablesForProviderByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AllTablesForProviderByDateStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeAssignedToTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback MenuForProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMenuItemByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMenuGroupsPerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback getServiceStationsPerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback TableAlertPerEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmAlertOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEmployeeByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback MenuPerProviderAdminFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback EmployeeListPerProvireAdminFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmployeePerProviderAdminFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEmployeePerProviderAdminFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback TablesPerProviderAdminFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReOpenTablesPerProviderAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveOrderBetweenTablesPerProviderAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveTableBetweenEmployeePerProviderAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeOrderValuePerOrderPerProviderAdminOperationCompleted;
        
        private System.Threading.SendOrPostCallback TablesPerProviderPerStatusAdminFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewMenuItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMenuItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMenuGroupPerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMenuGroupPerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewServiceStationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceStationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMenuGroupTypesPerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubMenuGroupTypesPerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSubMenuGroupTypePerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubMenuPerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSubMenuPerProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback EditEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisableEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GrantDenyAccessEmployeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMenuItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubmenuItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback OverrideOrderValueOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveOrderFromTableOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportsOverViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSpecialsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataUsingDataContractOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public HandUpService() {
            this.Url = global::HandUpGUI.Properties.Settings.Default.HandUpGUI_localhost_HandUpService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AllAdvertsAvailableForProviderCompletedEventHandler AllAdvertsAvailableForProviderCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event AddOrderCompletedEventHandler AddOrderCompleted;
        
        /// <remarks/>
        public event ConfirmOrderCompletedEventHandler ConfirmOrderCompleted;
        
        /// <remarks/>
        public event DeclineOrderCompletedEventHandler DeclineOrderCompleted;
        
        /// <remarks/>
        public event AddTextToOrderCompletedEventHandler AddTextToOrderCompleted;
        
        /// <remarks/>
        public event OrdersPerTableCompletedEventHandler OrdersPerTableCompleted;
        
        /// <remarks/>
        public event JoinTableCodeCompletedEventHandler JoinTableCodeCompleted;
        
        /// <remarks/>
        public event AddTableCompletedEventHandler AddTableCompleted;
        
        /// <remarks/>
        public event AddPatronToTableCompletedEventHandler AddPatronToTableCompleted;
        
        /// <remarks/>
        public event CloseTableCompletedEventHandler CloseTableCompleted;
        
        /// <remarks/>
        public event CallWaiterCompletedEventHandler CallWaiterCompleted;
        
        /// <remarks/>
        public event ActiveTablesForWaiterCompletedEventHandler ActiveTablesForWaiterCompleted;
        
        /// <remarks/>
        public event ActiveTablesForProcessorCompletedEventHandler ActiveTablesForProcessorCompleted;
        
        /// <remarks/>
        public event ActiveTablesForProviderCompletedEventHandler ActiveTablesForProviderCompleted;
        
        /// <remarks/>
        public event AllTablesForProviderByDateCompletedEventHandler AllTablesForProviderByDateCompleted;
        
        /// <remarks/>
        public event AllTablesForProviderByDateStatusCompletedEventHandler AllTablesForProviderByDateStatusCompleted;
        
        /// <remarks/>
        public event getEmployeeAssignedToTableCompletedEventHandler getEmployeeAssignedToTableCompleted;
        
        /// <remarks/>
        public event MenuForProviderCompletedEventHandler MenuForProviderCompleted;
        
        /// <remarks/>
        public event getMenuItemByIDCompletedEventHandler getMenuItemByIDCompleted;
        
        /// <remarks/>
        public event getMenuGroupsPerProviderCompletedEventHandler getMenuGroupsPerProviderCompleted;
        
        /// <remarks/>
        public event getServiceStationsPerProviderCompletedEventHandler getServiceStationsPerProviderCompleted;
        
        /// <remarks/>
        public event TableAlertPerEmployeeCompletedEventHandler TableAlertPerEmployeeCompleted;
        
        /// <remarks/>
        public event ConfirmAlertCompletedEventHandler ConfirmAlertCompleted;
        
        /// <remarks/>
        public event getEmployeeByIDCompletedEventHandler getEmployeeByIDCompleted;
        
        /// <remarks/>
        public event MenuPerProviderAdminFullCompletedEventHandler MenuPerProviderAdminFullCompleted;
        
        /// <remarks/>
        public event EmployeeListPerProvireAdminFullCompletedEventHandler EmployeeListPerProvireAdminFullCompleted;
        
        /// <remarks/>
        public event AddEmployeePerProviderAdminFullCompletedEventHandler AddEmployeePerProviderAdminFullCompleted;
        
        /// <remarks/>
        public event UpdateEmployeePerProviderAdminFullCompletedEventHandler UpdateEmployeePerProviderAdminFullCompleted;
        
        /// <remarks/>
        public event TablesPerProviderAdminFullCompletedEventHandler TablesPerProviderAdminFullCompleted;
        
        /// <remarks/>
        public event ReOpenTablesPerProviderAdminCompletedEventHandler ReOpenTablesPerProviderAdminCompleted;
        
        /// <remarks/>
        public event MoveOrderBetweenTablesPerProviderAdminCompletedEventHandler MoveOrderBetweenTablesPerProviderAdminCompleted;
        
        /// <remarks/>
        public event MoveTableBetweenEmployeePerProviderAdminCompletedEventHandler MoveTableBetweenEmployeePerProviderAdminCompleted;
        
        /// <remarks/>
        public event ChangeOrderValuePerOrderPerProviderAdminCompletedEventHandler ChangeOrderValuePerOrderPerProviderAdminCompleted;
        
        /// <remarks/>
        public event TablesPerProviderPerStatusAdminFullCompletedEventHandler TablesPerProviderPerStatusAdminFullCompleted;
        
        /// <remarks/>
        public event AddNewMenuItemCompletedEventHandler AddNewMenuItemCompleted;
        
        /// <remarks/>
        public event UpdateMenuItemCompletedEventHandler UpdateMenuItemCompleted;
        
        /// <remarks/>
        public event UpdateMenuGroupPerProviderCompletedEventHandler UpdateMenuGroupPerProviderCompleted;
        
        /// <remarks/>
        public event AddMenuGroupPerProviderCompletedEventHandler AddMenuGroupPerProviderCompleted;
        
        /// <remarks/>
        public event AddNewServiceStationCompletedEventHandler AddNewServiceStationCompleted;
        
        /// <remarks/>
        public event UpdateServiceStationCompletedEventHandler UpdateServiceStationCompleted;
        
        /// <remarks/>
        public event UpdateMenuGroupTypesPerProviderCompletedEventHandler UpdateMenuGroupTypesPerProviderCompleted;
        
        /// <remarks/>
        public event AddSubMenuGroupTypesPerProviderCompletedEventHandler AddSubMenuGroupTypesPerProviderCompleted;
        
        /// <remarks/>
        public event UpdateSubMenuGroupTypePerProviderCompletedEventHandler UpdateSubMenuGroupTypePerProviderCompleted;
        
        /// <remarks/>
        public event AddSubMenuPerProviderCompletedEventHandler AddSubMenuPerProviderCompleted;
        
        /// <remarks/>
        public event UpdateSubMenuPerProviderCompletedEventHandler UpdateSubMenuPerProviderCompleted;
        
        /// <remarks/>
        public event AddEmployeeCompletedEventHandler AddEmployeeCompleted;
        
        /// <remarks/>
        public event EditEmployeeCompletedEventHandler EditEmployeeCompleted;
        
        /// <remarks/>
        public event DisableEmployeeCompletedEventHandler DisableEmployeeCompleted;
        
        /// <remarks/>
        public event GrantDenyAccessEmployeeCompletedEventHandler GrantDenyAccessEmployeeCompleted;
        
        /// <remarks/>
        public event AddMenuItemCompletedEventHandler AddMenuItemCompleted;
        
        /// <remarks/>
        public event AddSubmenuItemCompletedEventHandler AddSubmenuItemCompleted;
        
        /// <remarks/>
        public event OverrideOrderValueCompletedEventHandler OverrideOrderValueCompleted;
        
        /// <remarks/>
        public event MoveOrderFromTableCompletedEventHandler MoveOrderFromTableCompleted;
        
        /// <remarks/>
        public event ReportsOverViewCompletedEventHandler ReportsOverViewCompleted;
        
        /// <remarks/>
        public event AddSpecialsListCompletedEventHandler AddSpecialsListCompleted;
        
        /// <remarks/>
        public event GetDataUsingDataContractCompletedEventHandler GetDataUsingDataContractCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AllAdvertsAvailableForProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AllAdvertsAvailableForProvider(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified) {
            object[] results = this.Invoke("AllAdvertsAvailableForProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AllAdvertsAvailableForProviderAsync(int ProviderID, bool ProviderIDSpecified) {
            this.AllAdvertsAvailableForProviderAsync(ProviderID, ProviderIDSpecified, null);
        }
        
        /// <remarks/>
        public void AllAdvertsAvailableForProviderAsync(int ProviderID, bool ProviderIDSpecified, object userState) {
            if ((this.AllAdvertsAvailableForProviderOperationCompleted == null)) {
                this.AllAdvertsAvailableForProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllAdvertsAvailableForProviderOperationCompleted);
            }
            this.InvokeAsync("AllAdvertsAvailableForProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified}, this.AllAdvertsAvailableForProviderOperationCompleted, userState);
        }
        
        private void OnAllAdvertsAvailableForProviderOperationCompleted(object arg) {
            if ((this.AllAdvertsAvailableForProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllAdvertsAvailableForProviderCompleted(this, new AllAdvertsAvailableForProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet Login([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sUserName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sPassword) {
            object[] results = this.Invoke("Login", new object[] {
                        sUserName,
                        sPassword});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string sUserName, string sPassword) {
            this.LoginAsync(sUserName, sPassword, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string sUserName, string sPassword, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        sUserName,
                        sPassword}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AddOrder(int MenuItemID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuItemIDSpecified, int TableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TableIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string TextValue) {
            object[] results = this.Invoke("AddOrder", new object[] {
                        MenuItemID,
                        MenuItemIDSpecified,
                        TableID,
                        TableIDSpecified,
                        TextValue});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrderAsync(int MenuItemID, bool MenuItemIDSpecified, int TableID, bool TableIDSpecified, string TextValue) {
            this.AddOrderAsync(MenuItemID, MenuItemIDSpecified, TableID, TableIDSpecified, TextValue, null);
        }
        
        /// <remarks/>
        public void AddOrderAsync(int MenuItemID, bool MenuItemIDSpecified, int TableID, bool TableIDSpecified, string TextValue, object userState) {
            if ((this.AddOrderOperationCompleted == null)) {
                this.AddOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrderOperationCompleted);
            }
            this.InvokeAsync("AddOrder", new object[] {
                        MenuItemID,
                        MenuItemIDSpecified,
                        TableID,
                        TableIDSpecified,
                        TextValue}, this.AddOrderOperationCompleted, userState);
        }
        
        private void OnAddOrderOperationCompleted(object arg) {
            if ((this.AddOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrderCompleted(this, new AddOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/ConfirmOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ConfirmOrder(int OrderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool OrderIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sStatus) {
            object[] results = this.Invoke("ConfirmOrder", new object[] {
                        OrderID,
                        OrderIDSpecified,
                        sStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConfirmOrderAsync(int OrderID, bool OrderIDSpecified, string sStatus) {
            this.ConfirmOrderAsync(OrderID, OrderIDSpecified, sStatus, null);
        }
        
        /// <remarks/>
        public void ConfirmOrderAsync(int OrderID, bool OrderIDSpecified, string sStatus, object userState) {
            if ((this.ConfirmOrderOperationCompleted == null)) {
                this.ConfirmOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmOrderOperationCompleted);
            }
            this.InvokeAsync("ConfirmOrder", new object[] {
                        OrderID,
                        OrderIDSpecified,
                        sStatus}, this.ConfirmOrderOperationCompleted, userState);
        }
        
        private void OnConfirmOrderOperationCompleted(object arg) {
            if ((this.ConfirmOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmOrderCompleted(this, new ConfirmOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/DeclineOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DeclineOrder(int OrderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool OrderIDSpecified) {
            object[] results = this.Invoke("DeclineOrder", new object[] {
                        OrderID,
                        OrderIDSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeclineOrderAsync(int OrderID, bool OrderIDSpecified) {
            this.DeclineOrderAsync(OrderID, OrderIDSpecified, null);
        }
        
        /// <remarks/>
        public void DeclineOrderAsync(int OrderID, bool OrderIDSpecified, object userState) {
            if ((this.DeclineOrderOperationCompleted == null)) {
                this.DeclineOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeclineOrderOperationCompleted);
            }
            this.InvokeAsync("DeclineOrder", new object[] {
                        OrderID,
                        OrderIDSpecified}, this.DeclineOrderOperationCompleted, userState);
        }
        
        private void OnDeclineOrderOperationCompleted(object arg) {
            if ((this.DeclineOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeclineOrderCompleted(this, new DeclineOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddTextToOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AddTextToOrder(int OrderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool OrderIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string TextValue) {
            object[] results = this.Invoke("AddTextToOrder", new object[] {
                        OrderID,
                        OrderIDSpecified,
                        TextValue});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddTextToOrderAsync(int OrderID, bool OrderIDSpecified, string TextValue) {
            this.AddTextToOrderAsync(OrderID, OrderIDSpecified, TextValue, null);
        }
        
        /// <remarks/>
        public void AddTextToOrderAsync(int OrderID, bool OrderIDSpecified, string TextValue, object userState) {
            if ((this.AddTextToOrderOperationCompleted == null)) {
                this.AddTextToOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTextToOrderOperationCompleted);
            }
            this.InvokeAsync("AddTextToOrder", new object[] {
                        OrderID,
                        OrderIDSpecified,
                        TextValue}, this.AddTextToOrderOperationCompleted, userState);
        }
        
        private void OnAddTextToOrderOperationCompleted(object arg) {
            if ((this.AddTextToOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTextToOrderCompleted(this, new AddTextToOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/OrdersPerTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet OrdersPerTable(int TableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TableIDSpecified) {
            object[] results = this.Invoke("OrdersPerTable", new object[] {
                        TableID,
                        TableIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void OrdersPerTableAsync(int TableID, bool TableIDSpecified) {
            this.OrdersPerTableAsync(TableID, TableIDSpecified, null);
        }
        
        /// <remarks/>
        public void OrdersPerTableAsync(int TableID, bool TableIDSpecified, object userState) {
            if ((this.OrdersPerTableOperationCompleted == null)) {
                this.OrdersPerTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOrdersPerTableOperationCompleted);
            }
            this.InvokeAsync("OrdersPerTable", new object[] {
                        TableID,
                        TableIDSpecified}, this.OrdersPerTableOperationCompleted, userState);
        }
        
        private void OnOrdersPerTableOperationCompleted(object arg) {
            if ((this.OrdersPerTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OrdersPerTableCompleted(this, new OrdersPerTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/JoinTableCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet JoinTableCode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sTableCode) {
            object[] results = this.Invoke("JoinTableCode", new object[] {
                        sTableCode});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void JoinTableCodeAsync(string sTableCode) {
            this.JoinTableCodeAsync(sTableCode, null);
        }
        
        /// <remarks/>
        public void JoinTableCodeAsync(string sTableCode, object userState) {
            if ((this.JoinTableCodeOperationCompleted == null)) {
                this.JoinTableCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnJoinTableCodeOperationCompleted);
            }
            this.InvokeAsync("JoinTableCode", new object[] {
                        sTableCode}, this.JoinTableCodeOperationCompleted, userState);
        }
        
        private void OnJoinTableCodeOperationCompleted(object arg) {
            if ((this.JoinTableCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.JoinTableCodeCompleted(this, new JoinTableCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AddTable(int FKiEmployeeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool FKiEmployeeIDSpecified, int FKiProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool FKiProviderIDSpecified, int iGuestNumber, [System.Xml.Serialization.XmlIgnoreAttribute()] bool iGuestNumberSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string TableName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Description) {
            object[] results = this.Invoke("AddTable", new object[] {
                        FKiEmployeeID,
                        FKiEmployeeIDSpecified,
                        FKiProviderID,
                        FKiProviderIDSpecified,
                        iGuestNumber,
                        iGuestNumberSpecified,
                        TableName,
                        Description});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddTableAsync(int FKiEmployeeID, bool FKiEmployeeIDSpecified, int FKiProviderID, bool FKiProviderIDSpecified, int iGuestNumber, bool iGuestNumberSpecified, string TableName, string Description) {
            this.AddTableAsync(FKiEmployeeID, FKiEmployeeIDSpecified, FKiProviderID, FKiProviderIDSpecified, iGuestNumber, iGuestNumberSpecified, TableName, Description, null);
        }
        
        /// <remarks/>
        public void AddTableAsync(int FKiEmployeeID, bool FKiEmployeeIDSpecified, int FKiProviderID, bool FKiProviderIDSpecified, int iGuestNumber, bool iGuestNumberSpecified, string TableName, string Description, object userState) {
            if ((this.AddTableOperationCompleted == null)) {
                this.AddTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTableOperationCompleted);
            }
            this.InvokeAsync("AddTable", new object[] {
                        FKiEmployeeID,
                        FKiEmployeeIDSpecified,
                        FKiProviderID,
                        FKiProviderIDSpecified,
                        iGuestNumber,
                        iGuestNumberSpecified,
                        TableName,
                        Description}, this.AddTableOperationCompleted, userState);
        }
        
        private void OnAddTableOperationCompleted(object arg) {
            if ((this.AddTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTableCompleted(this, new AddTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddPatronToTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AddPatronToTable(int PkiTableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PkiTableIDSpecified) {
            object[] results = this.Invoke("AddPatronToTable", new object[] {
                        PkiTableID,
                        PkiTableIDSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddPatronToTableAsync(int PkiTableID, bool PkiTableIDSpecified) {
            this.AddPatronToTableAsync(PkiTableID, PkiTableIDSpecified, null);
        }
        
        /// <remarks/>
        public void AddPatronToTableAsync(int PkiTableID, bool PkiTableIDSpecified, object userState) {
            if ((this.AddPatronToTableOperationCompleted == null)) {
                this.AddPatronToTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPatronToTableOperationCompleted);
            }
            this.InvokeAsync("AddPatronToTable", new object[] {
                        PkiTableID,
                        PkiTableIDSpecified}, this.AddPatronToTableOperationCompleted, userState);
        }
        
        private void OnAddPatronToTableOperationCompleted(object arg) {
            if ((this.AddPatronToTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPatronToTableCompleted(this, new AddPatronToTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/CloseTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CloseTable(int PkiTableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PkiTableIDSpecified, int iStatusID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool iStatusIDSpecified) {
            object[] results = this.Invoke("CloseTable", new object[] {
                        PkiTableID,
                        PkiTableIDSpecified,
                        iStatusID,
                        iStatusIDSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CloseTableAsync(int PkiTableID, bool PkiTableIDSpecified, int iStatusID, bool iStatusIDSpecified) {
            this.CloseTableAsync(PkiTableID, PkiTableIDSpecified, iStatusID, iStatusIDSpecified, null);
        }
        
        /// <remarks/>
        public void CloseTableAsync(int PkiTableID, bool PkiTableIDSpecified, int iStatusID, bool iStatusIDSpecified, object userState) {
            if ((this.CloseTableOperationCompleted == null)) {
                this.CloseTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseTableOperationCompleted);
            }
            this.InvokeAsync("CloseTable", new object[] {
                        PkiTableID,
                        PkiTableIDSpecified,
                        iStatusID,
                        iStatusIDSpecified}, this.CloseTableOperationCompleted, userState);
        }
        
        private void OnCloseTableOperationCompleted(object arg) {
            if ((this.CloseTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseTableCompleted(this, new CloseTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/CallWaiter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string CallWaiter(int PkiTableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PkiTableIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sMessage) {
            object[] results = this.Invoke("CallWaiter", new object[] {
                        PkiTableID,
                        PkiTableIDSpecified,
                        sMessage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CallWaiterAsync(int PkiTableID, bool PkiTableIDSpecified, string sMessage) {
            this.CallWaiterAsync(PkiTableID, PkiTableIDSpecified, sMessage, null);
        }
        
        /// <remarks/>
        public void CallWaiterAsync(int PkiTableID, bool PkiTableIDSpecified, string sMessage, object userState) {
            if ((this.CallWaiterOperationCompleted == null)) {
                this.CallWaiterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallWaiterOperationCompleted);
            }
            this.InvokeAsync("CallWaiter", new object[] {
                        PkiTableID,
                        PkiTableIDSpecified,
                        sMessage}, this.CallWaiterOperationCompleted, userState);
        }
        
        private void OnCallWaiterOperationCompleted(object arg) {
            if ((this.CallWaiterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallWaiterCompleted(this, new CallWaiterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/ActiveTablesForWaiter", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet ActiveTablesForWaiter(int EmployeeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool EmployeeIDSpecified) {
            object[] results = this.Invoke("ActiveTablesForWaiter", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ActiveTablesForWaiterAsync(int EmployeeID, bool EmployeeIDSpecified) {
            this.ActiveTablesForWaiterAsync(EmployeeID, EmployeeIDSpecified, null);
        }
        
        /// <remarks/>
        public void ActiveTablesForWaiterAsync(int EmployeeID, bool EmployeeIDSpecified, object userState) {
            if ((this.ActiveTablesForWaiterOperationCompleted == null)) {
                this.ActiveTablesForWaiterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActiveTablesForWaiterOperationCompleted);
            }
            this.InvokeAsync("ActiveTablesForWaiter", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified}, this.ActiveTablesForWaiterOperationCompleted, userState);
        }
        
        private void OnActiveTablesForWaiterOperationCompleted(object arg) {
            if ((this.ActiveTablesForWaiterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActiveTablesForWaiterCompleted(this, new ActiveTablesForWaiterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/ActiveTablesForProcessor", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet ActiveTablesForProcessor(int EmployeeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool EmployeeIDSpecified) {
            object[] results = this.Invoke("ActiveTablesForProcessor", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ActiveTablesForProcessorAsync(int EmployeeID, bool EmployeeIDSpecified) {
            this.ActiveTablesForProcessorAsync(EmployeeID, EmployeeIDSpecified, null);
        }
        
        /// <remarks/>
        public void ActiveTablesForProcessorAsync(int EmployeeID, bool EmployeeIDSpecified, object userState) {
            if ((this.ActiveTablesForProcessorOperationCompleted == null)) {
                this.ActiveTablesForProcessorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActiveTablesForProcessorOperationCompleted);
            }
            this.InvokeAsync("ActiveTablesForProcessor", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified}, this.ActiveTablesForProcessorOperationCompleted, userState);
        }
        
        private void OnActiveTablesForProcessorOperationCompleted(object arg) {
            if ((this.ActiveTablesForProcessorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActiveTablesForProcessorCompleted(this, new ActiveTablesForProcessorCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/ActiveTablesForProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet ActiveTablesForProvider(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified) {
            object[] results = this.Invoke("ActiveTablesForProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ActiveTablesForProviderAsync(int ProviderID, bool ProviderIDSpecified) {
            this.ActiveTablesForProviderAsync(ProviderID, ProviderIDSpecified, null);
        }
        
        /// <remarks/>
        public void ActiveTablesForProviderAsync(int ProviderID, bool ProviderIDSpecified, object userState) {
            if ((this.ActiveTablesForProviderOperationCompleted == null)) {
                this.ActiveTablesForProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActiveTablesForProviderOperationCompleted);
            }
            this.InvokeAsync("ActiveTablesForProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified}, this.ActiveTablesForProviderOperationCompleted, userState);
        }
        
        private void OnActiveTablesForProviderOperationCompleted(object arg) {
            if ((this.ActiveTablesForProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActiveTablesForProviderCompleted(this, new ActiveTablesForProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AllTablesForProviderByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AllTablesForProviderByDate(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, System.DateTime dtFromDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dtFromDateSpecified) {
            object[] results = this.Invoke("AllTablesForProviderByDate", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        dtFromDate,
                        dtFromDateSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AllTablesForProviderByDateAsync(int ProviderID, bool ProviderIDSpecified, System.DateTime dtFromDate, bool dtFromDateSpecified) {
            this.AllTablesForProviderByDateAsync(ProviderID, ProviderIDSpecified, dtFromDate, dtFromDateSpecified, null);
        }
        
        /// <remarks/>
        public void AllTablesForProviderByDateAsync(int ProviderID, bool ProviderIDSpecified, System.DateTime dtFromDate, bool dtFromDateSpecified, object userState) {
            if ((this.AllTablesForProviderByDateOperationCompleted == null)) {
                this.AllTablesForProviderByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllTablesForProviderByDateOperationCompleted);
            }
            this.InvokeAsync("AllTablesForProviderByDate", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        dtFromDate,
                        dtFromDateSpecified}, this.AllTablesForProviderByDateOperationCompleted, userState);
        }
        
        private void OnAllTablesForProviderByDateOperationCompleted(object arg) {
            if ((this.AllTablesForProviderByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllTablesForProviderByDateCompleted(this, new AllTablesForProviderByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AllTablesForProviderByDateStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AllTablesForProviderByDateStatus(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, System.DateTime dtFromDate, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dtFromDateSpecified, int StatusID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StatusIDSpecified) {
            object[] results = this.Invoke("AllTablesForProviderByDateStatus", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        dtFromDate,
                        dtFromDateSpecified,
                        StatusID,
                        StatusIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AllTablesForProviderByDateStatusAsync(int ProviderID, bool ProviderIDSpecified, System.DateTime dtFromDate, bool dtFromDateSpecified, int StatusID, bool StatusIDSpecified) {
            this.AllTablesForProviderByDateStatusAsync(ProviderID, ProviderIDSpecified, dtFromDate, dtFromDateSpecified, StatusID, StatusIDSpecified, null);
        }
        
        /// <remarks/>
        public void AllTablesForProviderByDateStatusAsync(int ProviderID, bool ProviderIDSpecified, System.DateTime dtFromDate, bool dtFromDateSpecified, int StatusID, bool StatusIDSpecified, object userState) {
            if ((this.AllTablesForProviderByDateStatusOperationCompleted == null)) {
                this.AllTablesForProviderByDateStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAllTablesForProviderByDateStatusOperationCompleted);
            }
            this.InvokeAsync("AllTablesForProviderByDateStatus", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        dtFromDate,
                        dtFromDateSpecified,
                        StatusID,
                        StatusIDSpecified}, this.AllTablesForProviderByDateStatusOperationCompleted, userState);
        }
        
        private void OnAllTablesForProviderByDateStatusOperationCompleted(object arg) {
            if ((this.AllTablesForProviderByDateStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AllTablesForProviderByDateStatusCompleted(this, new AllTablesForProviderByDateStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/getEmployeeAssignedToTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet getEmployeeAssignedToTable(int TableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TableIDSpecified) {
            object[] results = this.Invoke("getEmployeeAssignedToTable", new object[] {
                        TableID,
                        TableIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeAssignedToTableAsync(int TableID, bool TableIDSpecified) {
            this.getEmployeeAssignedToTableAsync(TableID, TableIDSpecified, null);
        }
        
        /// <remarks/>
        public void getEmployeeAssignedToTableAsync(int TableID, bool TableIDSpecified, object userState) {
            if ((this.getEmployeeAssignedToTableOperationCompleted == null)) {
                this.getEmployeeAssignedToTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeAssignedToTableOperationCompleted);
            }
            this.InvokeAsync("getEmployeeAssignedToTable", new object[] {
                        TableID,
                        TableIDSpecified}, this.getEmployeeAssignedToTableOperationCompleted, userState);
        }
        
        private void OngetEmployeeAssignedToTableOperationCompleted(object arg) {
            if ((this.getEmployeeAssignedToTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeAssignedToTableCompleted(this, new getEmployeeAssignedToTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/MenuForProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet MenuForProvider([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ProviderID) {
            object[] results = this.Invoke("MenuForProvider", new object[] {
                        ProviderID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MenuForProviderAsync(string ProviderID) {
            this.MenuForProviderAsync(ProviderID, null);
        }
        
        /// <remarks/>
        public void MenuForProviderAsync(string ProviderID, object userState) {
            if ((this.MenuForProviderOperationCompleted == null)) {
                this.MenuForProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMenuForProviderOperationCompleted);
            }
            this.InvokeAsync("MenuForProvider", new object[] {
                        ProviderID}, this.MenuForProviderOperationCompleted, userState);
        }
        
        private void OnMenuForProviderOperationCompleted(object arg) {
            if ((this.MenuForProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MenuForProviderCompleted(this, new MenuForProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/getMenuItemByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet getMenuItemByID(int PKiMenuID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool PKiMenuIDSpecified) {
            object[] results = this.Invoke("getMenuItemByID", new object[] {
                        PKiMenuID,
                        PKiMenuIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMenuItemByIDAsync(int PKiMenuID, bool PKiMenuIDSpecified) {
            this.getMenuItemByIDAsync(PKiMenuID, PKiMenuIDSpecified, null);
        }
        
        /// <remarks/>
        public void getMenuItemByIDAsync(int PKiMenuID, bool PKiMenuIDSpecified, object userState) {
            if ((this.getMenuItemByIDOperationCompleted == null)) {
                this.getMenuItemByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMenuItemByIDOperationCompleted);
            }
            this.InvokeAsync("getMenuItemByID", new object[] {
                        PKiMenuID,
                        PKiMenuIDSpecified}, this.getMenuItemByIDOperationCompleted, userState);
        }
        
        private void OngetMenuItemByIDOperationCompleted(object arg) {
            if ((this.getMenuItemByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMenuItemByIDCompleted(this, new getMenuItemByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/getMenuGroupsPerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet getMenuGroupsPerProvider(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified) {
            object[] results = this.Invoke("getMenuGroupsPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getMenuGroupsPerProviderAsync(int ProviderID, bool ProviderIDSpecified) {
            this.getMenuGroupsPerProviderAsync(ProviderID, ProviderIDSpecified, null);
        }
        
        /// <remarks/>
        public void getMenuGroupsPerProviderAsync(int ProviderID, bool ProviderIDSpecified, object userState) {
            if ((this.getMenuGroupsPerProviderOperationCompleted == null)) {
                this.getMenuGroupsPerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMenuGroupsPerProviderOperationCompleted);
            }
            this.InvokeAsync("getMenuGroupsPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified}, this.getMenuGroupsPerProviderOperationCompleted, userState);
        }
        
        private void OngetMenuGroupsPerProviderOperationCompleted(object arg) {
            if ((this.getMenuGroupsPerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMenuGroupsPerProviderCompleted(this, new getMenuGroupsPerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/getServiceStationsPerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet getServiceStationsPerProvider(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified) {
            object[] results = this.Invoke("getServiceStationsPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getServiceStationsPerProviderAsync(int ProviderID, bool ProviderIDSpecified) {
            this.getServiceStationsPerProviderAsync(ProviderID, ProviderIDSpecified, null);
        }
        
        /// <remarks/>
        public void getServiceStationsPerProviderAsync(int ProviderID, bool ProviderIDSpecified, object userState) {
            if ((this.getServiceStationsPerProviderOperationCompleted == null)) {
                this.getServiceStationsPerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetServiceStationsPerProviderOperationCompleted);
            }
            this.InvokeAsync("getServiceStationsPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified}, this.getServiceStationsPerProviderOperationCompleted, userState);
        }
        
        private void OngetServiceStationsPerProviderOperationCompleted(object arg) {
            if ((this.getServiceStationsPerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getServiceStationsPerProviderCompleted(this, new getServiceStationsPerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/TableAlertPerEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet TableAlertPerEmployee(int EmployeeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool EmployeeIDSpecified) {
            object[] results = this.Invoke("TableAlertPerEmployee", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TableAlertPerEmployeeAsync(int EmployeeID, bool EmployeeIDSpecified) {
            this.TableAlertPerEmployeeAsync(EmployeeID, EmployeeIDSpecified, null);
        }
        
        /// <remarks/>
        public void TableAlertPerEmployeeAsync(int EmployeeID, bool EmployeeIDSpecified, object userState) {
            if ((this.TableAlertPerEmployeeOperationCompleted == null)) {
                this.TableAlertPerEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTableAlertPerEmployeeOperationCompleted);
            }
            this.InvokeAsync("TableAlertPerEmployee", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified}, this.TableAlertPerEmployeeOperationCompleted, userState);
        }
        
        private void OnTableAlertPerEmployeeOperationCompleted(object arg) {
            if ((this.TableAlertPerEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TableAlertPerEmployeeCompleted(this, new TableAlertPerEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/ConfirmAlert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConfirmAlert([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sCode) {
            this.Invoke("ConfirmAlert", new object[] {
                        sCode});
        }
        
        /// <remarks/>
        public void ConfirmAlertAsync(string sCode) {
            this.ConfirmAlertAsync(sCode, null);
        }
        
        /// <remarks/>
        public void ConfirmAlertAsync(string sCode, object userState) {
            if ((this.ConfirmAlertOperationCompleted == null)) {
                this.ConfirmAlertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmAlertOperationCompleted);
            }
            this.InvokeAsync("ConfirmAlert", new object[] {
                        sCode}, this.ConfirmAlertOperationCompleted, userState);
        }
        
        private void OnConfirmAlertOperationCompleted(object arg) {
            if ((this.ConfirmAlertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmAlertCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/getEmployeeByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet getEmployeeByID(int EmployeeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool EmployeeIDSpecified) {
            object[] results = this.Invoke("getEmployeeByID", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getEmployeeByIDAsync(int EmployeeID, bool EmployeeIDSpecified) {
            this.getEmployeeByIDAsync(EmployeeID, EmployeeIDSpecified, null);
        }
        
        /// <remarks/>
        public void getEmployeeByIDAsync(int EmployeeID, bool EmployeeIDSpecified, object userState) {
            if ((this.getEmployeeByIDOperationCompleted == null)) {
                this.getEmployeeByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEmployeeByIDOperationCompleted);
            }
            this.InvokeAsync("getEmployeeByID", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified}, this.getEmployeeByIDOperationCompleted, userState);
        }
        
        private void OngetEmployeeByIDOperationCompleted(object arg) {
            if ((this.getEmployeeByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEmployeeByIDCompleted(this, new getEmployeeByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/MenuPerProviderAdminFull", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet MenuPerProviderAdminFull(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified) {
            object[] results = this.Invoke("MenuPerProviderAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MenuPerProviderAdminFullAsync(int ProviderID, bool ProviderIDSpecified) {
            this.MenuPerProviderAdminFullAsync(ProviderID, ProviderIDSpecified, null);
        }
        
        /// <remarks/>
        public void MenuPerProviderAdminFullAsync(int ProviderID, bool ProviderIDSpecified, object userState) {
            if ((this.MenuPerProviderAdminFullOperationCompleted == null)) {
                this.MenuPerProviderAdminFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMenuPerProviderAdminFullOperationCompleted);
            }
            this.InvokeAsync("MenuPerProviderAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified}, this.MenuPerProviderAdminFullOperationCompleted, userState);
        }
        
        private void OnMenuPerProviderAdminFullOperationCompleted(object arg) {
            if ((this.MenuPerProviderAdminFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MenuPerProviderAdminFullCompleted(this, new MenuPerProviderAdminFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/EmployeeListPerProvireAdminFull", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet EmployeeListPerProvireAdminFull(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified) {
            object[] results = this.Invoke("EmployeeListPerProvireAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void EmployeeListPerProvireAdminFullAsync(int ProviderID, bool ProviderIDSpecified) {
            this.EmployeeListPerProvireAdminFullAsync(ProviderID, ProviderIDSpecified, null);
        }
        
        /// <remarks/>
        public void EmployeeListPerProvireAdminFullAsync(int ProviderID, bool ProviderIDSpecified, object userState) {
            if ((this.EmployeeListPerProvireAdminFullOperationCompleted == null)) {
                this.EmployeeListPerProvireAdminFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmployeeListPerProvireAdminFullOperationCompleted);
            }
            this.InvokeAsync("EmployeeListPerProvireAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified}, this.EmployeeListPerProvireAdminFullOperationCompleted, userState);
        }
        
        private void OnEmployeeListPerProvireAdminFullOperationCompleted(object arg) {
            if ((this.EmployeeListPerProvireAdminFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EmployeeListPerProvireAdminFullCompleted(this, new EmployeeListPerProvireAdminFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddEmployeePerProviderAdminFull", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AddEmployeePerProviderAdminFull(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int EmployeeType, [System.Xml.Serialization.XmlIgnoreAttribute()] bool EmployeeTypeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeAddress1, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeAddress2, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeAddress3, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeEmail, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeNationality, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeSurname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeTel, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserName) {
            object[] results = this.Invoke("AddEmployeePerProviderAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        EmployeeType,
                        EmployeeTypeSpecified,
                        EmployeeAddress1,
                        EmployeeAddress2,
                        EmployeeAddress3,
                        EmployeeEmail,
                        EmployeeID,
                        EmployeeName,
                        EmployeeNationality,
                        EmployeeSurname,
                        EmployeeTel,
                        Password,
                        UserName});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmployeePerProviderAdminFullAsync(int ProviderID, bool ProviderIDSpecified, int EmployeeType, bool EmployeeTypeSpecified, string EmployeeAddress1, string EmployeeAddress2, string EmployeeAddress3, string EmployeeEmail, string EmployeeID, string EmployeeName, string EmployeeNationality, string EmployeeSurname, string EmployeeTel, string Password, string UserName) {
            this.AddEmployeePerProviderAdminFullAsync(ProviderID, ProviderIDSpecified, EmployeeType, EmployeeTypeSpecified, EmployeeAddress1, EmployeeAddress2, EmployeeAddress3, EmployeeEmail, EmployeeID, EmployeeName, EmployeeNationality, EmployeeSurname, EmployeeTel, Password, UserName, null);
        }
        
        /// <remarks/>
        public void AddEmployeePerProviderAdminFullAsync(
                    int ProviderID, 
                    bool ProviderIDSpecified, 
                    int EmployeeType, 
                    bool EmployeeTypeSpecified, 
                    string EmployeeAddress1, 
                    string EmployeeAddress2, 
                    string EmployeeAddress3, 
                    string EmployeeEmail, 
                    string EmployeeID, 
                    string EmployeeName, 
                    string EmployeeNationality, 
                    string EmployeeSurname, 
                    string EmployeeTel, 
                    string Password, 
                    string UserName, 
                    object userState) {
            if ((this.AddEmployeePerProviderAdminFullOperationCompleted == null)) {
                this.AddEmployeePerProviderAdminFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmployeePerProviderAdminFullOperationCompleted);
            }
            this.InvokeAsync("AddEmployeePerProviderAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        EmployeeType,
                        EmployeeTypeSpecified,
                        EmployeeAddress1,
                        EmployeeAddress2,
                        EmployeeAddress3,
                        EmployeeEmail,
                        EmployeeID,
                        EmployeeName,
                        EmployeeNationality,
                        EmployeeSurname,
                        EmployeeTel,
                        Password,
                        UserName}, this.AddEmployeePerProviderAdminFullOperationCompleted, userState);
        }
        
        private void OnAddEmployeePerProviderAdminFullOperationCompleted(object arg) {
            if ((this.AddEmployeePerProviderAdminFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmployeePerProviderAdminFullCompleted(this, new AddEmployeePerProviderAdminFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/UpdateEmployeePerProviderAdminFull", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet UpdateEmployeePerProviderAdminFull(
                    int EmployeeID, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool EmployeeIDSpecified, 
                    int EmployeeType, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool EmployeeTypeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeAddress1, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeAddress2, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeAddress3, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeEmail, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sEmployeeID, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeNationality, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeSurname, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string EmployeeTel, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Password, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string UserName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ServiceStation) {
            object[] results = this.Invoke("UpdateEmployeePerProviderAdminFull", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified,
                        EmployeeType,
                        EmployeeTypeSpecified,
                        EmployeeAddress1,
                        EmployeeAddress2,
                        EmployeeAddress3,
                        EmployeeEmail,
                        sEmployeeID,
                        EmployeeName,
                        EmployeeNationality,
                        EmployeeSurname,
                        EmployeeTel,
                        Password,
                        UserName,
                        ServiceStation});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEmployeePerProviderAdminFullAsync(
                    int EmployeeID, 
                    bool EmployeeIDSpecified, 
                    int EmployeeType, 
                    bool EmployeeTypeSpecified, 
                    string EmployeeAddress1, 
                    string EmployeeAddress2, 
                    string EmployeeAddress3, 
                    string EmployeeEmail, 
                    string sEmployeeID, 
                    string EmployeeName, 
                    string EmployeeNationality, 
                    string EmployeeSurname, 
                    string EmployeeTel, 
                    string Password, 
                    string UserName, 
                    string ServiceStation) {
            this.UpdateEmployeePerProviderAdminFullAsync(EmployeeID, EmployeeIDSpecified, EmployeeType, EmployeeTypeSpecified, EmployeeAddress1, EmployeeAddress2, EmployeeAddress3, EmployeeEmail, sEmployeeID, EmployeeName, EmployeeNationality, EmployeeSurname, EmployeeTel, Password, UserName, ServiceStation, null);
        }
        
        /// <remarks/>
        public void UpdateEmployeePerProviderAdminFullAsync(
                    int EmployeeID, 
                    bool EmployeeIDSpecified, 
                    int EmployeeType, 
                    bool EmployeeTypeSpecified, 
                    string EmployeeAddress1, 
                    string EmployeeAddress2, 
                    string EmployeeAddress3, 
                    string EmployeeEmail, 
                    string sEmployeeID, 
                    string EmployeeName, 
                    string EmployeeNationality, 
                    string EmployeeSurname, 
                    string EmployeeTel, 
                    string Password, 
                    string UserName, 
                    string ServiceStation, 
                    object userState) {
            if ((this.UpdateEmployeePerProviderAdminFullOperationCompleted == null)) {
                this.UpdateEmployeePerProviderAdminFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEmployeePerProviderAdminFullOperationCompleted);
            }
            this.InvokeAsync("UpdateEmployeePerProviderAdminFull", new object[] {
                        EmployeeID,
                        EmployeeIDSpecified,
                        EmployeeType,
                        EmployeeTypeSpecified,
                        EmployeeAddress1,
                        EmployeeAddress2,
                        EmployeeAddress3,
                        EmployeeEmail,
                        sEmployeeID,
                        EmployeeName,
                        EmployeeNationality,
                        EmployeeSurname,
                        EmployeeTel,
                        Password,
                        UserName,
                        ServiceStation}, this.UpdateEmployeePerProviderAdminFullOperationCompleted, userState);
        }
        
        private void OnUpdateEmployeePerProviderAdminFullOperationCompleted(object arg) {
            if ((this.UpdateEmployeePerProviderAdminFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEmployeePerProviderAdminFullCompleted(this, new UpdateEmployeePerProviderAdminFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/TablesPerProviderAdminFull", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet TablesPerProviderAdminFull(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, System.DateTime dtOpen, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dtOpenSpecified) {
            object[] results = this.Invoke("TablesPerProviderAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        dtOpen,
                        dtOpenSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TablesPerProviderAdminFullAsync(int ProviderID, bool ProviderIDSpecified, System.DateTime dtOpen, bool dtOpenSpecified) {
            this.TablesPerProviderAdminFullAsync(ProviderID, ProviderIDSpecified, dtOpen, dtOpenSpecified, null);
        }
        
        /// <remarks/>
        public void TablesPerProviderAdminFullAsync(int ProviderID, bool ProviderIDSpecified, System.DateTime dtOpen, bool dtOpenSpecified, object userState) {
            if ((this.TablesPerProviderAdminFullOperationCompleted == null)) {
                this.TablesPerProviderAdminFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTablesPerProviderAdminFullOperationCompleted);
            }
            this.InvokeAsync("TablesPerProviderAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        dtOpen,
                        dtOpenSpecified}, this.TablesPerProviderAdminFullOperationCompleted, userState);
        }
        
        private void OnTablesPerProviderAdminFullOperationCompleted(object arg) {
            if ((this.TablesPerProviderAdminFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TablesPerProviderAdminFullCompleted(this, new TablesPerProviderAdminFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/ReOpenTablesPerProviderAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet ReOpenTablesPerProviderAdmin(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int TableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool TableIDSpecified) {
            object[] results = this.Invoke("ReOpenTablesPerProviderAdmin", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        TableID,
                        TableIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ReOpenTablesPerProviderAdminAsync(int ProviderID, bool ProviderIDSpecified, int TableID, bool TableIDSpecified) {
            this.ReOpenTablesPerProviderAdminAsync(ProviderID, ProviderIDSpecified, TableID, TableIDSpecified, null);
        }
        
        /// <remarks/>
        public void ReOpenTablesPerProviderAdminAsync(int ProviderID, bool ProviderIDSpecified, int TableID, bool TableIDSpecified, object userState) {
            if ((this.ReOpenTablesPerProviderAdminOperationCompleted == null)) {
                this.ReOpenTablesPerProviderAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReOpenTablesPerProviderAdminOperationCompleted);
            }
            this.InvokeAsync("ReOpenTablesPerProviderAdmin", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        TableID,
                        TableIDSpecified}, this.ReOpenTablesPerProviderAdminOperationCompleted, userState);
        }
        
        private void OnReOpenTablesPerProviderAdminOperationCompleted(object arg) {
            if ((this.ReOpenTablesPerProviderAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReOpenTablesPerProviderAdminCompleted(this, new ReOpenTablesPerProviderAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/MoveOrderBetweenTablesPerProviderAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet MoveOrderBetweenTablesPerProviderAdmin(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int OrderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool OrderIDSpecified, int ToTableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ToTableIDSpecified) {
            object[] results = this.Invoke("MoveOrderBetweenTablesPerProviderAdmin", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        OrderID,
                        OrderIDSpecified,
                        ToTableID,
                        ToTableIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveOrderBetweenTablesPerProviderAdminAsync(int ProviderID, bool ProviderIDSpecified, int OrderID, bool OrderIDSpecified, int ToTableID, bool ToTableIDSpecified) {
            this.MoveOrderBetweenTablesPerProviderAdminAsync(ProviderID, ProviderIDSpecified, OrderID, OrderIDSpecified, ToTableID, ToTableIDSpecified, null);
        }
        
        /// <remarks/>
        public void MoveOrderBetweenTablesPerProviderAdminAsync(int ProviderID, bool ProviderIDSpecified, int OrderID, bool OrderIDSpecified, int ToTableID, bool ToTableIDSpecified, object userState) {
            if ((this.MoveOrderBetweenTablesPerProviderAdminOperationCompleted == null)) {
                this.MoveOrderBetweenTablesPerProviderAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveOrderBetweenTablesPerProviderAdminOperationCompleted);
            }
            this.InvokeAsync("MoveOrderBetweenTablesPerProviderAdmin", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        OrderID,
                        OrderIDSpecified,
                        ToTableID,
                        ToTableIDSpecified}, this.MoveOrderBetweenTablesPerProviderAdminOperationCompleted, userState);
        }
        
        private void OnMoveOrderBetweenTablesPerProviderAdminOperationCompleted(object arg) {
            if ((this.MoveOrderBetweenTablesPerProviderAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveOrderBetweenTablesPerProviderAdminCompleted(this, new MoveOrderBetweenTablesPerProviderAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/MoveTableBetweenEmployeePerProviderAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet MoveTableBetweenEmployeePerProviderAdmin(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int EmployeeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool EmployeeIDSpecified, int ToTableID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ToTableIDSpecified) {
            object[] results = this.Invoke("MoveTableBetweenEmployeePerProviderAdmin", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        EmployeeID,
                        EmployeeIDSpecified,
                        ToTableID,
                        ToTableIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void MoveTableBetweenEmployeePerProviderAdminAsync(int ProviderID, bool ProviderIDSpecified, int EmployeeID, bool EmployeeIDSpecified, int ToTableID, bool ToTableIDSpecified) {
            this.MoveTableBetweenEmployeePerProviderAdminAsync(ProviderID, ProviderIDSpecified, EmployeeID, EmployeeIDSpecified, ToTableID, ToTableIDSpecified, null);
        }
        
        /// <remarks/>
        public void MoveTableBetweenEmployeePerProviderAdminAsync(int ProviderID, bool ProviderIDSpecified, int EmployeeID, bool EmployeeIDSpecified, int ToTableID, bool ToTableIDSpecified, object userState) {
            if ((this.MoveTableBetweenEmployeePerProviderAdminOperationCompleted == null)) {
                this.MoveTableBetweenEmployeePerProviderAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveTableBetweenEmployeePerProviderAdminOperationCompleted);
            }
            this.InvokeAsync("MoveTableBetweenEmployeePerProviderAdmin", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        EmployeeID,
                        EmployeeIDSpecified,
                        ToTableID,
                        ToTableIDSpecified}, this.MoveTableBetweenEmployeePerProviderAdminOperationCompleted, userState);
        }
        
        private void OnMoveTableBetweenEmployeePerProviderAdminOperationCompleted(object arg) {
            if ((this.MoveTableBetweenEmployeePerProviderAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveTableBetweenEmployeePerProviderAdminCompleted(this, new MoveTableBetweenEmployeePerProviderAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/ChangeOrderValuePerOrderPerProviderAdmin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet ChangeOrderValuePerOrderPerProviderAdmin(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int OrderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool OrderIDSpecified, double OrderValue, [System.Xml.Serialization.XmlIgnoreAttribute()] bool OrderValueSpecified) {
            object[] results = this.Invoke("ChangeOrderValuePerOrderPerProviderAdmin", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        OrderID,
                        OrderIDSpecified,
                        OrderValue,
                        OrderValueSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeOrderValuePerOrderPerProviderAdminAsync(int ProviderID, bool ProviderIDSpecified, int OrderID, bool OrderIDSpecified, double OrderValue, bool OrderValueSpecified) {
            this.ChangeOrderValuePerOrderPerProviderAdminAsync(ProviderID, ProviderIDSpecified, OrderID, OrderIDSpecified, OrderValue, OrderValueSpecified, null);
        }
        
        /// <remarks/>
        public void ChangeOrderValuePerOrderPerProviderAdminAsync(int ProviderID, bool ProviderIDSpecified, int OrderID, bool OrderIDSpecified, double OrderValue, bool OrderValueSpecified, object userState) {
            if ((this.ChangeOrderValuePerOrderPerProviderAdminOperationCompleted == null)) {
                this.ChangeOrderValuePerOrderPerProviderAdminOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeOrderValuePerOrderPerProviderAdminOperationCompleted);
            }
            this.InvokeAsync("ChangeOrderValuePerOrderPerProviderAdmin", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        OrderID,
                        OrderIDSpecified,
                        OrderValue,
                        OrderValueSpecified}, this.ChangeOrderValuePerOrderPerProviderAdminOperationCompleted, userState);
        }
        
        private void OnChangeOrderValuePerOrderPerProviderAdminOperationCompleted(object arg) {
            if ((this.ChangeOrderValuePerOrderPerProviderAdminCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeOrderValuePerOrderPerProviderAdminCompleted(this, new ChangeOrderValuePerOrderPerProviderAdminCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/TablesPerProviderPerStatusAdminFull", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet TablesPerProviderPerStatusAdminFull(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, System.DateTime dtOpen, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dtOpenSpecified, int StatusID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool StatusIDSpecified) {
            object[] results = this.Invoke("TablesPerProviderPerStatusAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        dtOpen,
                        dtOpenSpecified,
                        StatusID,
                        StatusIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void TablesPerProviderPerStatusAdminFullAsync(int ProviderID, bool ProviderIDSpecified, System.DateTime dtOpen, bool dtOpenSpecified, int StatusID, bool StatusIDSpecified) {
            this.TablesPerProviderPerStatusAdminFullAsync(ProviderID, ProviderIDSpecified, dtOpen, dtOpenSpecified, StatusID, StatusIDSpecified, null);
        }
        
        /// <remarks/>
        public void TablesPerProviderPerStatusAdminFullAsync(int ProviderID, bool ProviderIDSpecified, System.DateTime dtOpen, bool dtOpenSpecified, int StatusID, bool StatusIDSpecified, object userState) {
            if ((this.TablesPerProviderPerStatusAdminFullOperationCompleted == null)) {
                this.TablesPerProviderPerStatusAdminFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTablesPerProviderPerStatusAdminFullOperationCompleted);
            }
            this.InvokeAsync("TablesPerProviderPerStatusAdminFull", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        dtOpen,
                        dtOpenSpecified,
                        StatusID,
                        StatusIDSpecified}, this.TablesPerProviderPerStatusAdminFullOperationCompleted, userState);
        }
        
        private void OnTablesPerProviderPerStatusAdminFullOperationCompleted(object arg) {
            if ((this.TablesPerProviderPerStatusAdminFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TablesPerProviderPerStatusAdminFullCompleted(this, new TablesPerProviderPerStatusAdminFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddNewMenuItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AddNewMenuItem(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int ServiceSationID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ServiceSationIDSpecified, int MenuGroupID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuGroupIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuItemName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuItemDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuItemImage, double MenuItemPrice, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuItemPriceSpecified) {
            object[] results = this.Invoke("AddNewMenuItem", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        ServiceSationID,
                        ServiceSationIDSpecified,
                        MenuGroupID,
                        MenuGroupIDSpecified,
                        MenuItemName,
                        MenuItemDescription,
                        MenuItemImage,
                        MenuItemPrice,
                        MenuItemPriceSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddNewMenuItemAsync(int ProviderID, bool ProviderIDSpecified, int ServiceSationID, bool ServiceSationIDSpecified, int MenuGroupID, bool MenuGroupIDSpecified, string MenuItemName, string MenuItemDescription, string MenuItemImage, double MenuItemPrice, bool MenuItemPriceSpecified) {
            this.AddNewMenuItemAsync(ProviderID, ProviderIDSpecified, ServiceSationID, ServiceSationIDSpecified, MenuGroupID, MenuGroupIDSpecified, MenuItemName, MenuItemDescription, MenuItemImage, MenuItemPrice, MenuItemPriceSpecified, null);
        }
        
        /// <remarks/>
        public void AddNewMenuItemAsync(int ProviderID, bool ProviderIDSpecified, int ServiceSationID, bool ServiceSationIDSpecified, int MenuGroupID, bool MenuGroupIDSpecified, string MenuItemName, string MenuItemDescription, string MenuItemImage, double MenuItemPrice, bool MenuItemPriceSpecified, object userState) {
            if ((this.AddNewMenuItemOperationCompleted == null)) {
                this.AddNewMenuItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewMenuItemOperationCompleted);
            }
            this.InvokeAsync("AddNewMenuItem", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        ServiceSationID,
                        ServiceSationIDSpecified,
                        MenuGroupID,
                        MenuGroupIDSpecified,
                        MenuItemName,
                        MenuItemDescription,
                        MenuItemImage,
                        MenuItemPrice,
                        MenuItemPriceSpecified}, this.AddNewMenuItemOperationCompleted, userState);
        }
        
        private void OnAddNewMenuItemOperationCompleted(object arg) {
            if ((this.AddNewMenuItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewMenuItemCompleted(this, new AddNewMenuItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/UpdateMenuItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet UpdateMenuItem(int MenuItemID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuItemIDSpecified, int MenuGroupID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuGroupIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuItemName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuItemDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuItemImage, double MenuItemPrice, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuItemPriceSpecified, int ActiveStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ActiveStatusSpecified, int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int ServiceSationID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ServiceSationIDSpecified) {
            object[] results = this.Invoke("UpdateMenuItem", new object[] {
                        MenuItemID,
                        MenuItemIDSpecified,
                        MenuGroupID,
                        MenuGroupIDSpecified,
                        MenuItemName,
                        MenuItemDescription,
                        MenuItemImage,
                        MenuItemPrice,
                        MenuItemPriceSpecified,
                        ActiveStatus,
                        ActiveStatusSpecified,
                        ProviderID,
                        ProviderIDSpecified,
                        ServiceSationID,
                        ServiceSationIDSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMenuItemAsync(int MenuItemID, bool MenuItemIDSpecified, int MenuGroupID, bool MenuGroupIDSpecified, string MenuItemName, string MenuItemDescription, string MenuItemImage, double MenuItemPrice, bool MenuItemPriceSpecified, int ActiveStatus, bool ActiveStatusSpecified, int ProviderID, bool ProviderIDSpecified, int ServiceSationID, bool ServiceSationIDSpecified) {
            this.UpdateMenuItemAsync(MenuItemID, MenuItemIDSpecified, MenuGroupID, MenuGroupIDSpecified, MenuItemName, MenuItemDescription, MenuItemImage, MenuItemPrice, MenuItemPriceSpecified, ActiveStatus, ActiveStatusSpecified, ProviderID, ProviderIDSpecified, ServiceSationID, ServiceSationIDSpecified, null);
        }
        
        /// <remarks/>
        public void UpdateMenuItemAsync(
                    int MenuItemID, 
                    bool MenuItemIDSpecified, 
                    int MenuGroupID, 
                    bool MenuGroupIDSpecified, 
                    string MenuItemName, 
                    string MenuItemDescription, 
                    string MenuItemImage, 
                    double MenuItemPrice, 
                    bool MenuItemPriceSpecified, 
                    int ActiveStatus, 
                    bool ActiveStatusSpecified, 
                    int ProviderID, 
                    bool ProviderIDSpecified, 
                    int ServiceSationID, 
                    bool ServiceSationIDSpecified, 
                    object userState) {
            if ((this.UpdateMenuItemOperationCompleted == null)) {
                this.UpdateMenuItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMenuItemOperationCompleted);
            }
            this.InvokeAsync("UpdateMenuItem", new object[] {
                        MenuItemID,
                        MenuItemIDSpecified,
                        MenuGroupID,
                        MenuGroupIDSpecified,
                        MenuItemName,
                        MenuItemDescription,
                        MenuItemImage,
                        MenuItemPrice,
                        MenuItemPriceSpecified,
                        ActiveStatus,
                        ActiveStatusSpecified,
                        ProviderID,
                        ProviderIDSpecified,
                        ServiceSationID,
                        ServiceSationIDSpecified}, this.UpdateMenuItemOperationCompleted, userState);
        }
        
        private void OnUpdateMenuItemOperationCompleted(object arg) {
            if ((this.UpdateMenuItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMenuItemCompleted(this, new UpdateMenuItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/UpdateMenuGroupPerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet UpdateMenuGroupPerProvider(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int MenuGroupID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuGroupIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuGroupName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuGroupDescription) {
            object[] results = this.Invoke("UpdateMenuGroupPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        MenuGroupID,
                        MenuGroupIDSpecified,
                        MenuGroupName,
                        MenuGroupDescription});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMenuGroupPerProviderAsync(int ProviderID, bool ProviderIDSpecified, int MenuGroupID, bool MenuGroupIDSpecified, string MenuGroupName, string MenuGroupDescription) {
            this.UpdateMenuGroupPerProviderAsync(ProviderID, ProviderIDSpecified, MenuGroupID, MenuGroupIDSpecified, MenuGroupName, MenuGroupDescription, null);
        }
        
        /// <remarks/>
        public void UpdateMenuGroupPerProviderAsync(int ProviderID, bool ProviderIDSpecified, int MenuGroupID, bool MenuGroupIDSpecified, string MenuGroupName, string MenuGroupDescription, object userState) {
            if ((this.UpdateMenuGroupPerProviderOperationCompleted == null)) {
                this.UpdateMenuGroupPerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMenuGroupPerProviderOperationCompleted);
            }
            this.InvokeAsync("UpdateMenuGroupPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        MenuGroupID,
                        MenuGroupIDSpecified,
                        MenuGroupName,
                        MenuGroupDescription}, this.UpdateMenuGroupPerProviderOperationCompleted, userState);
        }
        
        private void OnUpdateMenuGroupPerProviderOperationCompleted(object arg) {
            if ((this.UpdateMenuGroupPerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMenuGroupPerProviderCompleted(this, new UpdateMenuGroupPerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddMenuGroupPerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AddMenuGroupPerProvider(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuGroupName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuGroupDescription) {
            object[] results = this.Invoke("AddMenuGroupPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        MenuGroupName,
                        MenuGroupDescription});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddMenuGroupPerProviderAsync(int ProviderID, bool ProviderIDSpecified, string MenuGroupName, string MenuGroupDescription) {
            this.AddMenuGroupPerProviderAsync(ProviderID, ProviderIDSpecified, MenuGroupName, MenuGroupDescription, null);
        }
        
        /// <remarks/>
        public void AddMenuGroupPerProviderAsync(int ProviderID, bool ProviderIDSpecified, string MenuGroupName, string MenuGroupDescription, object userState) {
            if ((this.AddMenuGroupPerProviderOperationCompleted == null)) {
                this.AddMenuGroupPerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMenuGroupPerProviderOperationCompleted);
            }
            this.InvokeAsync("AddMenuGroupPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        MenuGroupName,
                        MenuGroupDescription}, this.AddMenuGroupPerProviderOperationCompleted, userState);
        }
        
        private void OnAddMenuGroupPerProviderOperationCompleted(object arg) {
            if ((this.AddMenuGroupPerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMenuGroupPerProviderCompleted(this, new AddMenuGroupPerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddNewServiceStation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AddNewServiceStation(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int ServicestationID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ServicestationIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ServiceStationName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ServiceNameDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ActiveStatus) {
            object[] results = this.Invoke("AddNewServiceStation", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        ServicestationID,
                        ServicestationIDSpecified,
                        ServiceStationName,
                        ServiceNameDescription,
                        ActiveStatus});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddNewServiceStationAsync(int ProviderID, bool ProviderIDSpecified, int ServicestationID, bool ServicestationIDSpecified, string ServiceStationName, string ServiceNameDescription, string ActiveStatus) {
            this.AddNewServiceStationAsync(ProviderID, ProviderIDSpecified, ServicestationID, ServicestationIDSpecified, ServiceStationName, ServiceNameDescription, ActiveStatus, null);
        }
        
        /// <remarks/>
        public void AddNewServiceStationAsync(int ProviderID, bool ProviderIDSpecified, int ServicestationID, bool ServicestationIDSpecified, string ServiceStationName, string ServiceNameDescription, string ActiveStatus, object userState) {
            if ((this.AddNewServiceStationOperationCompleted == null)) {
                this.AddNewServiceStationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewServiceStationOperationCompleted);
            }
            this.InvokeAsync("AddNewServiceStation", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        ServicestationID,
                        ServicestationIDSpecified,
                        ServiceStationName,
                        ServiceNameDescription,
                        ActiveStatus}, this.AddNewServiceStationOperationCompleted, userState);
        }
        
        private void OnAddNewServiceStationOperationCompleted(object arg) {
            if ((this.AddNewServiceStationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewServiceStationCompleted(this, new AddNewServiceStationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/UpdateServiceStation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet UpdateServiceStation(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int ServicestationID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ServicestationIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ServiceStationName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ServiceNameDescription, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ActiveStatus) {
            object[] results = this.Invoke("UpdateServiceStation", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        ServicestationID,
                        ServicestationIDSpecified,
                        ServiceStationName,
                        ServiceNameDescription,
                        ActiveStatus});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateServiceStationAsync(int ProviderID, bool ProviderIDSpecified, int ServicestationID, bool ServicestationIDSpecified, string ServiceStationName, string ServiceNameDescription, string ActiveStatus) {
            this.UpdateServiceStationAsync(ProviderID, ProviderIDSpecified, ServicestationID, ServicestationIDSpecified, ServiceStationName, ServiceNameDescription, ActiveStatus, null);
        }
        
        /// <remarks/>
        public void UpdateServiceStationAsync(int ProviderID, bool ProviderIDSpecified, int ServicestationID, bool ServicestationIDSpecified, string ServiceStationName, string ServiceNameDescription, string ActiveStatus, object userState) {
            if ((this.UpdateServiceStationOperationCompleted == null)) {
                this.UpdateServiceStationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceStationOperationCompleted);
            }
            this.InvokeAsync("UpdateServiceStation", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        ServicestationID,
                        ServicestationIDSpecified,
                        ServiceStationName,
                        ServiceNameDescription,
                        ActiveStatus}, this.UpdateServiceStationOperationCompleted, userState);
        }
        
        private void OnUpdateServiceStationOperationCompleted(object arg) {
            if ((this.UpdateServiceStationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceStationCompleted(this, new UpdateServiceStationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/UpdateMenuGroupTypesPerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet UpdateMenuGroupTypesPerProvider(int MenuGroupID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuGroupIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuGroupName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string MenuGroupDescription) {
            object[] results = this.Invoke("UpdateMenuGroupTypesPerProvider", new object[] {
                        MenuGroupID,
                        MenuGroupIDSpecified,
                        MenuGroupName,
                        MenuGroupDescription});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMenuGroupTypesPerProviderAsync(int MenuGroupID, bool MenuGroupIDSpecified, string MenuGroupName, string MenuGroupDescription) {
            this.UpdateMenuGroupTypesPerProviderAsync(MenuGroupID, MenuGroupIDSpecified, MenuGroupName, MenuGroupDescription, null);
        }
        
        /// <remarks/>
        public void UpdateMenuGroupTypesPerProviderAsync(int MenuGroupID, bool MenuGroupIDSpecified, string MenuGroupName, string MenuGroupDescription, object userState) {
            if ((this.UpdateMenuGroupTypesPerProviderOperationCompleted == null)) {
                this.UpdateMenuGroupTypesPerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMenuGroupTypesPerProviderOperationCompleted);
            }
            this.InvokeAsync("UpdateMenuGroupTypesPerProvider", new object[] {
                        MenuGroupID,
                        MenuGroupIDSpecified,
                        MenuGroupName,
                        MenuGroupDescription}, this.UpdateMenuGroupTypesPerProviderOperationCompleted, userState);
        }
        
        private void OnUpdateMenuGroupTypesPerProviderOperationCompleted(object arg) {
            if ((this.UpdateMenuGroupTypesPerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMenuGroupTypesPerProviderCompleted(this, new UpdateMenuGroupTypesPerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddSubMenuGroupTypesPerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AddSubMenuGroupTypesPerProvider(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubMenuGroupTypeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubMenuGroupTypepDescription) {
            object[] results = this.Invoke("AddSubMenuGroupTypesPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        SubMenuGroupTypeName,
                        SubMenuGroupTypepDescription});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubMenuGroupTypesPerProviderAsync(int ProviderID, bool ProviderIDSpecified, string SubMenuGroupTypeName, string SubMenuGroupTypepDescription) {
            this.AddSubMenuGroupTypesPerProviderAsync(ProviderID, ProviderIDSpecified, SubMenuGroupTypeName, SubMenuGroupTypepDescription, null);
        }
        
        /// <remarks/>
        public void AddSubMenuGroupTypesPerProviderAsync(int ProviderID, bool ProviderIDSpecified, string SubMenuGroupTypeName, string SubMenuGroupTypepDescription, object userState) {
            if ((this.AddSubMenuGroupTypesPerProviderOperationCompleted == null)) {
                this.AddSubMenuGroupTypesPerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubMenuGroupTypesPerProviderOperationCompleted);
            }
            this.InvokeAsync("AddSubMenuGroupTypesPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        SubMenuGroupTypeName,
                        SubMenuGroupTypepDescription}, this.AddSubMenuGroupTypesPerProviderOperationCompleted, userState);
        }
        
        private void OnAddSubMenuGroupTypesPerProviderOperationCompleted(object arg) {
            if ((this.AddSubMenuGroupTypesPerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubMenuGroupTypesPerProviderCompleted(this, new AddSubMenuGroupTypesPerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/UpdateSubMenuGroupTypePerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet UpdateSubMenuGroupTypePerProvider(int SubMenuGroupTypeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SubMenuGroupTypeIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubMenuGroupTypeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubMenuGroupTypepDescription, int ActiveStatus, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ActiveStatusSpecified) {
            object[] results = this.Invoke("UpdateSubMenuGroupTypePerProvider", new object[] {
                        SubMenuGroupTypeID,
                        SubMenuGroupTypeIDSpecified,
                        SubMenuGroupTypeName,
                        SubMenuGroupTypepDescription,
                        ActiveStatus,
                        ActiveStatusSpecified});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSubMenuGroupTypePerProviderAsync(int SubMenuGroupTypeID, bool SubMenuGroupTypeIDSpecified, string SubMenuGroupTypeName, string SubMenuGroupTypepDescription, int ActiveStatus, bool ActiveStatusSpecified) {
            this.UpdateSubMenuGroupTypePerProviderAsync(SubMenuGroupTypeID, SubMenuGroupTypeIDSpecified, SubMenuGroupTypeName, SubMenuGroupTypepDescription, ActiveStatus, ActiveStatusSpecified, null);
        }
        
        /// <remarks/>
        public void UpdateSubMenuGroupTypePerProviderAsync(int SubMenuGroupTypeID, bool SubMenuGroupTypeIDSpecified, string SubMenuGroupTypeName, string SubMenuGroupTypepDescription, int ActiveStatus, bool ActiveStatusSpecified, object userState) {
            if ((this.UpdateSubMenuGroupTypePerProviderOperationCompleted == null)) {
                this.UpdateSubMenuGroupTypePerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubMenuGroupTypePerProviderOperationCompleted);
            }
            this.InvokeAsync("UpdateSubMenuGroupTypePerProvider", new object[] {
                        SubMenuGroupTypeID,
                        SubMenuGroupTypeIDSpecified,
                        SubMenuGroupTypeName,
                        SubMenuGroupTypepDescription,
                        ActiveStatus,
                        ActiveStatusSpecified}, this.UpdateSubMenuGroupTypePerProviderOperationCompleted, userState);
        }
        
        private void OnUpdateSubMenuGroupTypePerProviderOperationCompleted(object arg) {
            if ((this.UpdateSubMenuGroupTypePerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubMenuGroupTypePerProviderCompleted(this, new UpdateSubMenuGroupTypePerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddSubMenuPerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet AddSubMenuPerProvider(int ProviderID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ProviderIDSpecified, int MenuItemID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuItemIDSpecified, int SubMenuGroupTypeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SubMenuGroupTypeIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubMenuName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubMenuDescription) {
            object[] results = this.Invoke("AddSubMenuPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        MenuItemID,
                        MenuItemIDSpecified,
                        SubMenuGroupTypeID,
                        SubMenuGroupTypeIDSpecified,
                        SubMenuName,
                        SubMenuDescription});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubMenuPerProviderAsync(int ProviderID, bool ProviderIDSpecified, int MenuItemID, bool MenuItemIDSpecified, int SubMenuGroupTypeID, bool SubMenuGroupTypeIDSpecified, string SubMenuName, string SubMenuDescription) {
            this.AddSubMenuPerProviderAsync(ProviderID, ProviderIDSpecified, MenuItemID, MenuItemIDSpecified, SubMenuGroupTypeID, SubMenuGroupTypeIDSpecified, SubMenuName, SubMenuDescription, null);
        }
        
        /// <remarks/>
        public void AddSubMenuPerProviderAsync(int ProviderID, bool ProviderIDSpecified, int MenuItemID, bool MenuItemIDSpecified, int SubMenuGroupTypeID, bool SubMenuGroupTypeIDSpecified, string SubMenuName, string SubMenuDescription, object userState) {
            if ((this.AddSubMenuPerProviderOperationCompleted == null)) {
                this.AddSubMenuPerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubMenuPerProviderOperationCompleted);
            }
            this.InvokeAsync("AddSubMenuPerProvider", new object[] {
                        ProviderID,
                        ProviderIDSpecified,
                        MenuItemID,
                        MenuItemIDSpecified,
                        SubMenuGroupTypeID,
                        SubMenuGroupTypeIDSpecified,
                        SubMenuName,
                        SubMenuDescription}, this.AddSubMenuPerProviderOperationCompleted, userState);
        }
        
        private void OnAddSubMenuPerProviderOperationCompleted(object arg) {
            if ((this.AddSubMenuPerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubMenuPerProviderCompleted(this, new AddSubMenuPerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/UpdateSubMenuPerProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Data.DataSet UpdateSubMenuPerProvider(int SubMenuID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SubMenuIDSpecified, int MenuItemID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool MenuItemIDSpecified, int SubMenuGroupTypeID, [System.Xml.Serialization.XmlIgnoreAttribute()] bool SubMenuGroupTypeIDSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubMenuName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string SubMenuDescription) {
            object[] results = this.Invoke("UpdateSubMenuPerProvider", new object[] {
                        SubMenuID,
                        SubMenuIDSpecified,
                        MenuItemID,
                        MenuItemIDSpecified,
                        SubMenuGroupTypeID,
                        SubMenuGroupTypeIDSpecified,
                        SubMenuName,
                        SubMenuDescription});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSubMenuPerProviderAsync(int SubMenuID, bool SubMenuIDSpecified, int MenuItemID, bool MenuItemIDSpecified, int SubMenuGroupTypeID, bool SubMenuGroupTypeIDSpecified, string SubMenuName, string SubMenuDescription) {
            this.UpdateSubMenuPerProviderAsync(SubMenuID, SubMenuIDSpecified, MenuItemID, MenuItemIDSpecified, SubMenuGroupTypeID, SubMenuGroupTypeIDSpecified, SubMenuName, SubMenuDescription, null);
        }
        
        /// <remarks/>
        public void UpdateSubMenuPerProviderAsync(int SubMenuID, bool SubMenuIDSpecified, int MenuItemID, bool MenuItemIDSpecified, int SubMenuGroupTypeID, bool SubMenuGroupTypeIDSpecified, string SubMenuName, string SubMenuDescription, object userState) {
            if ((this.UpdateSubMenuPerProviderOperationCompleted == null)) {
                this.UpdateSubMenuPerProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubMenuPerProviderOperationCompleted);
            }
            this.InvokeAsync("UpdateSubMenuPerProvider", new object[] {
                        SubMenuID,
                        SubMenuIDSpecified,
                        MenuItemID,
                        MenuItemIDSpecified,
                        SubMenuGroupTypeID,
                        SubMenuGroupTypeIDSpecified,
                        SubMenuName,
                        SubMenuDescription}, this.UpdateSubMenuPerProviderOperationCompleted, userState);
        }
        
        private void OnUpdateSubMenuPerProviderOperationCompleted(object arg) {
            if ((this.UpdateSubMenuPerProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubMenuPerProviderCompleted(this, new UpdateSubMenuPerProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AddEmployee() {
            object[] results = this.Invoke("AddEmployee", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddEmployeeAsync() {
            this.AddEmployeeAsync(null);
        }
        
        /// <remarks/>
        public void AddEmployeeAsync(object userState) {
            if ((this.AddEmployeeOperationCompleted == null)) {
                this.AddEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddEmployeeOperationCompleted);
            }
            this.InvokeAsync("AddEmployee", new object[0], this.AddEmployeeOperationCompleted, userState);
        }
        
        private void OnAddEmployeeOperationCompleted(object arg) {
            if ((this.AddEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddEmployeeCompleted(this, new AddEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/EditEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string EditEmployee() {
            object[] results = this.Invoke("EditEmployee", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EditEmployeeAsync() {
            this.EditEmployeeAsync(null);
        }
        
        /// <remarks/>
        public void EditEmployeeAsync(object userState) {
            if ((this.EditEmployeeOperationCompleted == null)) {
                this.EditEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEditEmployeeOperationCompleted);
            }
            this.InvokeAsync("EditEmployee", new object[0], this.EditEmployeeOperationCompleted, userState);
        }
        
        private void OnEditEmployeeOperationCompleted(object arg) {
            if ((this.EditEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EditEmployeeCompleted(this, new EditEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/DisableEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string DisableEmployee() {
            object[] results = this.Invoke("DisableEmployee", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DisableEmployeeAsync() {
            this.DisableEmployeeAsync(null);
        }
        
        /// <remarks/>
        public void DisableEmployeeAsync(object userState) {
            if ((this.DisableEmployeeOperationCompleted == null)) {
                this.DisableEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableEmployeeOperationCompleted);
            }
            this.InvokeAsync("DisableEmployee", new object[0], this.DisableEmployeeOperationCompleted, userState);
        }
        
        private void OnDisableEmployeeOperationCompleted(object arg) {
            if ((this.DisableEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableEmployeeCompleted(this, new DisableEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/GrantDenyAccessEmployee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string GrantDenyAccessEmployee() {
            object[] results = this.Invoke("GrantDenyAccessEmployee", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GrantDenyAccessEmployeeAsync() {
            this.GrantDenyAccessEmployeeAsync(null);
        }
        
        /// <remarks/>
        public void GrantDenyAccessEmployeeAsync(object userState) {
            if ((this.GrantDenyAccessEmployeeOperationCompleted == null)) {
                this.GrantDenyAccessEmployeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrantDenyAccessEmployeeOperationCompleted);
            }
            this.InvokeAsync("GrantDenyAccessEmployee", new object[0], this.GrantDenyAccessEmployeeOperationCompleted, userState);
        }
        
        private void OnGrantDenyAccessEmployeeOperationCompleted(object arg) {
            if ((this.GrantDenyAccessEmployeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrantDenyAccessEmployeeCompleted(this, new GrantDenyAccessEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddMenuItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AddMenuItem() {
            object[] results = this.Invoke("AddMenuItem", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddMenuItemAsync() {
            this.AddMenuItemAsync(null);
        }
        
        /// <remarks/>
        public void AddMenuItemAsync(object userState) {
            if ((this.AddMenuItemOperationCompleted == null)) {
                this.AddMenuItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMenuItemOperationCompleted);
            }
            this.InvokeAsync("AddMenuItem", new object[0], this.AddMenuItemOperationCompleted, userState);
        }
        
        private void OnAddMenuItemOperationCompleted(object arg) {
            if ((this.AddMenuItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMenuItemCompleted(this, new AddMenuItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddSubmenuItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AddSubmenuItem() {
            object[] results = this.Invoke("AddSubmenuItem", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSubmenuItemAsync() {
            this.AddSubmenuItemAsync(null);
        }
        
        /// <remarks/>
        public void AddSubmenuItemAsync(object userState) {
            if ((this.AddSubmenuItemOperationCompleted == null)) {
                this.AddSubmenuItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubmenuItemOperationCompleted);
            }
            this.InvokeAsync("AddSubmenuItem", new object[0], this.AddSubmenuItemOperationCompleted, userState);
        }
        
        private void OnAddSubmenuItemOperationCompleted(object arg) {
            if ((this.AddSubmenuItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubmenuItemCompleted(this, new AddSubmenuItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/OverrideOrderValue", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string OverrideOrderValue() {
            object[] results = this.Invoke("OverrideOrderValue", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OverrideOrderValueAsync() {
            this.OverrideOrderValueAsync(null);
        }
        
        /// <remarks/>
        public void OverrideOrderValueAsync(object userState) {
            if ((this.OverrideOrderValueOperationCompleted == null)) {
                this.OverrideOrderValueOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOverrideOrderValueOperationCompleted);
            }
            this.InvokeAsync("OverrideOrderValue", new object[0], this.OverrideOrderValueOperationCompleted, userState);
        }
        
        private void OnOverrideOrderValueOperationCompleted(object arg) {
            if ((this.OverrideOrderValueCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OverrideOrderValueCompleted(this, new OverrideOrderValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/MoveOrderFromTable", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string MoveOrderFromTable() {
            object[] results = this.Invoke("MoveOrderFromTable", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MoveOrderFromTableAsync() {
            this.MoveOrderFromTableAsync(null);
        }
        
        /// <remarks/>
        public void MoveOrderFromTableAsync(object userState) {
            if ((this.MoveOrderFromTableOperationCompleted == null)) {
                this.MoveOrderFromTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveOrderFromTableOperationCompleted);
            }
            this.InvokeAsync("MoveOrderFromTable", new object[0], this.MoveOrderFromTableOperationCompleted, userState);
        }
        
        private void OnMoveOrderFromTableOperationCompleted(object arg) {
            if ((this.MoveOrderFromTableCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveOrderFromTableCompleted(this, new MoveOrderFromTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/ReportsOverView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string ReportsOverView() {
            object[] results = this.Invoke("ReportsOverView", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReportsOverViewAsync() {
            this.ReportsOverViewAsync(null);
        }
        
        /// <remarks/>
        public void ReportsOverViewAsync(object userState) {
            if ((this.ReportsOverViewOperationCompleted == null)) {
                this.ReportsOverViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportsOverViewOperationCompleted);
            }
            this.InvokeAsync("ReportsOverView", new object[0], this.ReportsOverViewOperationCompleted, userState);
        }
        
        private void OnReportsOverViewOperationCompleted(object arg) {
            if ((this.ReportsOverViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportsOverViewCompleted(this, new ReportsOverViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/AddSpecialsList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AddSpecialsList() {
            object[] results = this.Invoke("AddSpecialsList", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddSpecialsListAsync() {
            this.AddSpecialsListAsync(null);
        }
        
        /// <remarks/>
        public void AddSpecialsListAsync(object userState) {
            if ((this.AddSpecialsListOperationCompleted == null)) {
                this.AddSpecialsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSpecialsListOperationCompleted);
            }
            this.InvokeAsync("AddSpecialsList", new object[0], this.AddSpecialsListOperationCompleted, userState);
        }
        
        private void OnAddSpecialsListOperationCompleted(object arg) {
            if ((this.AddSpecialsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSpecialsListCompleted(this, new AddSpecialsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IHandUpService/GetDataUsingDataContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CompositeType GetDataUsingDataContract([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CompositeType composite) {
            object[] results = this.Invoke("GetDataUsingDataContract", new object[] {
                        composite});
            return ((CompositeType)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataUsingDataContractAsync(CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        /// <remarks/>
        public void GetDataUsingDataContractAsync(CompositeType composite, object userState) {
            if ((this.GetDataUsingDataContractOperationCompleted == null)) {
                this.GetDataUsingDataContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractOperationCompleted);
            }
            this.InvokeAsync("GetDataUsingDataContract", new object[] {
                        composite}, this.GetDataUsingDataContractOperationCompleted, userState);
        }
        
        private void OnGetDataUsingDataContractOperationCompleted(object arg) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17929")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/HandUpWCF")]
    public partial class CompositeType {
        
        private bool boolValueField;
        
        private bool boolValueFieldSpecified;
        
        private string stringValueField;
        
        /// <remarks/>
        public bool BoolValue {
            get {
                return this.boolValueField;
            }
            set {
                this.boolValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoolValueSpecified {
            get {
                return this.boolValueFieldSpecified;
            }
            set {
                this.boolValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StringValue {
            get {
                return this.stringValueField;
            }
            set {
                this.stringValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AllAdvertsAvailableForProviderCompletedEventHandler(object sender, AllAdvertsAvailableForProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllAdvertsAvailableForProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllAdvertsAvailableForProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddOrderCompletedEventHandler(object sender, AddOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ConfirmOrderCompletedEventHandler(object sender, ConfirmOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConfirmOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConfirmOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DeclineOrderCompletedEventHandler(object sender, DeclineOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeclineOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeclineOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddTextToOrderCompletedEventHandler(object sender, AddTextToOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTextToOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTextToOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void OrdersPerTableCompletedEventHandler(object sender, OrdersPerTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OrdersPerTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OrdersPerTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void JoinTableCodeCompletedEventHandler(object sender, JoinTableCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class JoinTableCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal JoinTableCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddTableCompletedEventHandler(object sender, AddTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddPatronToTableCompletedEventHandler(object sender, AddPatronToTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPatronToTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPatronToTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CloseTableCompletedEventHandler(object sender, CloseTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void CallWaiterCompletedEventHandler(object sender, CallWaiterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CallWaiterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CallWaiterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ActiveTablesForWaiterCompletedEventHandler(object sender, ActiveTablesForWaiterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActiveTablesForWaiterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActiveTablesForWaiterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ActiveTablesForProcessorCompletedEventHandler(object sender, ActiveTablesForProcessorCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActiveTablesForProcessorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActiveTablesForProcessorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ActiveTablesForProviderCompletedEventHandler(object sender, ActiveTablesForProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActiveTablesForProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActiveTablesForProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AllTablesForProviderByDateCompletedEventHandler(object sender, AllTablesForProviderByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllTablesForProviderByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllTablesForProviderByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AllTablesForProviderByDateStatusCompletedEventHandler(object sender, AllTablesForProviderByDateStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AllTablesForProviderByDateStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AllTablesForProviderByDateStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getEmployeeAssignedToTableCompletedEventHandler(object sender, getEmployeeAssignedToTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeAssignedToTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeAssignedToTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MenuForProviderCompletedEventHandler(object sender, MenuForProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MenuForProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MenuForProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMenuItemByIDCompletedEventHandler(object sender, getMenuItemByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMenuItemByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMenuItemByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getMenuGroupsPerProviderCompletedEventHandler(object sender, getMenuGroupsPerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMenuGroupsPerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMenuGroupsPerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getServiceStationsPerProviderCompletedEventHandler(object sender, getServiceStationsPerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getServiceStationsPerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getServiceStationsPerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TableAlertPerEmployeeCompletedEventHandler(object sender, TableAlertPerEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TableAlertPerEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TableAlertPerEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ConfirmAlertCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void getEmployeeByIDCompletedEventHandler(object sender, getEmployeeByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEmployeeByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEmployeeByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MenuPerProviderAdminFullCompletedEventHandler(object sender, MenuPerProviderAdminFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MenuPerProviderAdminFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MenuPerProviderAdminFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void EmployeeListPerProvireAdminFullCompletedEventHandler(object sender, EmployeeListPerProvireAdminFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmployeeListPerProvireAdminFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EmployeeListPerProvireAdminFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddEmployeePerProviderAdminFullCompletedEventHandler(object sender, AddEmployeePerProviderAdminFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmployeePerProviderAdminFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmployeePerProviderAdminFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateEmployeePerProviderAdminFullCompletedEventHandler(object sender, UpdateEmployeePerProviderAdminFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEmployeePerProviderAdminFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEmployeePerProviderAdminFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TablesPerProviderAdminFullCompletedEventHandler(object sender, TablesPerProviderAdminFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TablesPerProviderAdminFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TablesPerProviderAdminFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReOpenTablesPerProviderAdminCompletedEventHandler(object sender, ReOpenTablesPerProviderAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReOpenTablesPerProviderAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReOpenTablesPerProviderAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MoveOrderBetweenTablesPerProviderAdminCompletedEventHandler(object sender, MoveOrderBetweenTablesPerProviderAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveOrderBetweenTablesPerProviderAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveOrderBetweenTablesPerProviderAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MoveTableBetweenEmployeePerProviderAdminCompletedEventHandler(object sender, MoveTableBetweenEmployeePerProviderAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveTableBetweenEmployeePerProviderAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveTableBetweenEmployeePerProviderAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ChangeOrderValuePerOrderPerProviderAdminCompletedEventHandler(object sender, ChangeOrderValuePerOrderPerProviderAdminCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeOrderValuePerOrderPerProviderAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeOrderValuePerOrderPerProviderAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void TablesPerProviderPerStatusAdminFullCompletedEventHandler(object sender, TablesPerProviderPerStatusAdminFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TablesPerProviderPerStatusAdminFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TablesPerProviderPerStatusAdminFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddNewMenuItemCompletedEventHandler(object sender, AddNewMenuItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewMenuItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNewMenuItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMenuItemCompletedEventHandler(object sender, UpdateMenuItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMenuItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMenuItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMenuGroupPerProviderCompletedEventHandler(object sender, UpdateMenuGroupPerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMenuGroupPerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMenuGroupPerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddMenuGroupPerProviderCompletedEventHandler(object sender, AddMenuGroupPerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMenuGroupPerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMenuGroupPerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddNewServiceStationCompletedEventHandler(object sender, AddNewServiceStationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewServiceStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNewServiceStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateServiceStationCompletedEventHandler(object sender, UpdateServiceStationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateServiceStationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateServiceStationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateMenuGroupTypesPerProviderCompletedEventHandler(object sender, UpdateMenuGroupTypesPerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMenuGroupTypesPerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMenuGroupTypesPerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddSubMenuGroupTypesPerProviderCompletedEventHandler(object sender, AddSubMenuGroupTypesPerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubMenuGroupTypesPerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubMenuGroupTypesPerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateSubMenuGroupTypePerProviderCompletedEventHandler(object sender, UpdateSubMenuGroupTypePerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSubMenuGroupTypePerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSubMenuGroupTypePerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddSubMenuPerProviderCompletedEventHandler(object sender, AddSubMenuPerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubMenuPerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubMenuPerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void UpdateSubMenuPerProviderCompletedEventHandler(object sender, UpdateSubMenuPerProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSubMenuPerProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSubMenuPerProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddEmployeeCompletedEventHandler(object sender, AddEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void EditEmployeeCompletedEventHandler(object sender, EditEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EditEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EditEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DisableEmployeeCompletedEventHandler(object sender, DisableEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisableEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GrantDenyAccessEmployeeCompletedEventHandler(object sender, GrantDenyAccessEmployeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GrantDenyAccessEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GrantDenyAccessEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddMenuItemCompletedEventHandler(object sender, AddMenuItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddMenuItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddMenuItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddSubmenuItemCompletedEventHandler(object sender, AddSubmenuItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSubmenuItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSubmenuItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void OverrideOrderValueCompletedEventHandler(object sender, OverrideOrderValueCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OverrideOrderValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OverrideOrderValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void MoveOrderFromTableCompletedEventHandler(object sender, MoveOrderFromTableCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MoveOrderFromTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MoveOrderFromTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void ReportsOverViewCompletedEventHandler(object sender, ReportsOverViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportsOverViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportsOverViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddSpecialsListCompletedEventHandler(object sender, AddSpecialsListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSpecialsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSpecialsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetDataUsingDataContractCompletedEventHandler(object sender, GetDataUsingDataContractCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CompositeType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompositeType)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591